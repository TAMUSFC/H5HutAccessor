"""
    Utility classes for dealing with H5Hut files generated by OPAL
"""
import os
from datetime import datetime

import h5py
import numpy as np

__all__ = ["H5HutAccessor"]

DATASETKEYS = {'x', 'y', 'z', 'px', 'py', 'pz', 'id'}
# this dict maps the user-facing key to the appropriate H5Hut attr key
STEPATTRKEYS = {'t': 'TIME',
             'theta': 'REFTHETA',
             's': 'SPOS'}


class H5HutStep():
    def __init__(self, dset):
        # Concisely set all the properties that can be retrieved from this step
        for prop in DATASETKEYS:
            setattr(self, prop, dset[prop][()])
        for prop, realkey in STEPATTRKEYS.items():
            setattr(self, prop, dset.attrs[realkey])


class H5HutAccessor():
    def __init__(self, fn, stride=1, maxstep=-1):
        self._h5 = f = h5py.File(fn, 'r')
        self.modified_time = datetime.fromtimestamp(int(os.stat(fn).st_mtime))
        self.steps = sorted([k for k in f.keys() if k.startswith("Step#")], key=lambda n: int(n.split('#')[-1]))[:maxstep:stride]
        # Concisely set all the properties that can be retrieved for all steps
        for prop in DATASETKEYS.union(STEPATTRKEYS.keys()):
            setattr(self, prop, np.asarray([getattr(step, prop) for step in self]))

    def __enter__(self):
        return self

    def __exit__(self, *args):
        self.__del__(args)

    def __del__(self, *args):
        try:
            self._h5.close()
        except ValueError:
            pass

    def __getitem__(self, idx):
        if isinstance(idx, slice):
            return [H5HutStep(self._h5[step]) for step in self.steps[idx]]
        elif idx >= len(self.steps):
            raise IndexError
        else:
            return H5HutStep(self._h5[self.steps[idx]])

    def __len__(self):
        return len(self.steps)
